data.frame(unclass(summary(trial$lib2)))
#Getting average number of checkouts per day over Q1 2023
circ_day %>% filter(date >= as.Date("2023-04-01", "%Y-%m-%d") & date < as.Date("2023-06-30", "%Y-%m-%d")) %>%
group_by(day) %>%
summarise(Average_Checkouts = mean(lib1, na.rm = TRUE), n = n()) %>%
arrange(desc(Average_Checkouts))
new_cards <- read_xlsx("Data/Example Data.xlsx", sheet = "new_card")
#pivot to wider graph
new_cards <- pivot_wider(new_cards, names_from = branch, values_from = new_card_accounts)
#Creating a synthetic month variable
new_cards$date <- as.Date(paste(new_cards$year, new_cards$month, "01", sep = "-"))
#grabbing the month and year (12-18 for december 2018) of the tweet tweeted for later analysis to group by month and year
new_cards$month <- format(new_cards$date, "%b")
## Choosing the branch for new card anaylsis
#Branches: large: "lib1", "lib2" medium "lib3", "lib4"
branch_new_cards <- "lib1"
#Line graph
ggplot(new_cards, aes(date, .data[[branch_new_cards]])) +
geom_line() +
geom_point(size = 2) +
labs(
title = paste0("New Card Registrations at ", branch_new_cards),
y = "New Cards",
x = "Date"
) +
scale_y_continuous(
breaks = seq(0, 300, by = 25),
limits = c(0, 300)) +
scale_x_date(
date_breaks = "1 month",
limits = as.Date(c("2022-01-01", "2022-12-11"), "%Y-%m-%d"),
date_labels = "%b '%y") +
theme_clean()
#bar graph with numbers on top of bars
ggplot(new_cards, aes(date, .data[[branch_new_cards]])) +
geom_bar(stat = "identity", color = "black", fill = "blue3") +
geom_label(aes(label = .data[[branch_new_cards]]), hjust = .5, nudge_y = 7.3) +
labs(
title = paste0("New Card Registrations at ", branch_new_cards, " since 2022"),
y = "Number of New Cards",
x = NULL,
caption = "Figure 5.1"
) +
scale_y_continuous(
breaks = seq(0, 300, by = 25),
limits = c(0, 300)) +
scale_x_date(
date_breaks = "month",
limits = as.Date(c("2021-12-14", "2023-06-15"), "%Y-%m-%d"),
date_labels = "%b '%y",
expand = c(0.01, 0)) +
theme_clean() +
theme(axis.text.x = element_text(angle = 25, hjust = 1))
ggplot(new_cards, aes(date)) +
geom_line(aes(y = lib1, color = "Library 1"), size = 1) +
geom_point(aes(y = lib1), size = 2) +
geom_line(aes(y = lib2, color = "Library 2"), size = 1) +
geom_point(aes(y = lib2), size = 2) +
labs(
title = "New Card Registrations per Month Across Large Branches",
y = "New Cards",
x = NULL,
caption = "Figure 5.2"
) +
scale_y_continuous(
breaks = seq(0, 300, by = 50),
limits = c(0, 300)) +
scale_x_date(
date_breaks = "1 month",
limits = as.Date(c("2021-08-01", "2023-06-01"), "%Y-%m-%d"),
date_labels = "%b '%y",
#For some reason this needs to be added to stop ggplot from expanding the x axis despite the specification of the limit
expand = c(.01, 0)) +
scale_color_manual(name = NULL,
values = c("Library 1" = "blue3", "Library 2" = "black")) +
#annotate("rect", xmin = as.Date("2022-01-01", "%Y-%m-%d"), xmax = as.Date("2022-03-01", "%Y-%m-%d"),
#         ymin = -Inf, ymax = Inf, alpha = .1, fill = "red") +
#annotate("rect", xmin = as.Date("2023-01-01", "%Y-%m-%d"), xmax = as.Date("2023-03-01", "%Y-%m-%d"),
#        ymin = -Inf, ymax = Inf, alpha = .1, fill = "red") +
#annotate("rect", xmin = as.Date("2021-01-01", "%Y-%m-%d"), xmax = as.Date("2021-03-01", "%Y-%m-%d"),
#         ymin = -Inf, ymax = Inf, alpha = .1, fill = "red") +
theme_clean() +
theme(axis.text.x = element_text(angle = 30, hjust = 1),
#Adding a vertical line at each week interval
panel.grid.major.x = element_line(color = "grey", size = 0.2),
panel.grid.minor.y = element_line(color = "grey", linetype = "dotted"),
legend.position = c(0.74, 0.9),
legend.direction = "horizontal",
legend.text = element_text(size = 8))
ggplot(new_cards, aes(date)) +
geom_line(aes(y = lib3, color = "Library 3"), size = 1) +
geom_point(aes(y = lib3), size = 2) +
geom_line(aes(y = lib4, color = "Library 4"), size = 1) +
geom_point(aes(y = lib4), size = 2) +
labs(
title = "New Card Registrations per Month Across Medium Branches",
y = "New Cards",
x = NULL,
caption = "Figure 5.2"
) +
scale_y_continuous(
breaks = seq(0, 300, by = 50),
limits = c(0, 300)) +
scale_x_date(
date_breaks = "1 month",
limits = as.Date(c("2022-01-01", "2023-06-01"), "%Y-%m-%d"),
date_labels = "%b '%y",
#For some reason this needs to be added to stop ggplot from expanding the x axis despite the specification of the limit
expand = c(.01, 0)) +
scale_color_manual(name = NULL,
values = c("Library 3" = "hotpink", "Library 4" = "green")) +
theme_clean() +
theme(axis.text.x = element_text(angle = 30, hjust = 1),
#Adding a vertical line at each week interval
panel.grid.major.x = element_line(color = "grey", size = 0.2),
panel.grid.minor.y = element_line(color = "grey", linetype = "dotted"),
legend.position = c(0.74, 0.84),
legend.direction = "horizontal",
legend.text = element_text(size = 8))
ggplot(new_cards, aes(month(date, label=TRUE, abbr=TRUE), group = factor(year), color = factor(year))) +
geom_line(aes(y = lib3), size = 1) +
geom_point(aes(y = lib3), size = 2) +
labs(
title = "New Card Registrations per Month at lib3",
y = "New Cards",
x = NULL,
caption = "Figure 5.3",
color = NULL) +
scale_y_continuous(
breaks = seq(0, 300, by = 50),
limits = c(0, 300)) +
scale_color_manual(name = NULL,
values = c("2021" = "chartreuse3", "2022" = "orangered2", "2023" = "blue3")) +
theme_clean() +
theme(#Adding a vertical line at each week interval
panel.grid.major.x = element_line(color = "grey", size = 0.2),
panel.grid.minor.y = element_line(color = "grey", linetype = "dotted"),
legend.position = c(0.84, 0.84),
legend.text = element_text(size = 10))
#Getting average number of checkouts per day over Q1 2023
circ_day %>% filter(date >= as.Date("2023-04-01", "%Y-%m-%d") & date < as.Date("2023-06-30", "%Y-%m-%d")) %>%
group_by(day) %>%
summarise(Average_Checkouts = mean(lib2, na.rm = TRUE), n = n()) %>%
arrange(desc(Average_Checkouts))
#Reading in the excel file based on the input from branch
oandp <- read_xlsx("Data/Example Data.xlsx", sheet = "outreach")
#Creating a synthetic month variable
oandp$date <- as.Date(paste(oandp$year, oandp$month, "01", sep = "-"))
#grabbing the month and year (12-18 for december 2018) of the tweet tweeted for later analysis to group by month and year
oandp$month <- format(oandp$date, "%b")
#Filtering specific dates we want to look at programs and outreach for
#oandp <- oandp %>% filter(date <= as.Date("2023-03-01"))
#Figuring out attendance per programming event and outreach event
oandp <- oandp %>% group_by(month) %>% mutate(APO = attendence_o/total_outreach_events, APP = attendence_p/total_program_events)
#Rounding both new variables at once
oandp <- oandp %>%
mutate_at(vars(APO, APP), round, digits = 1)
#Quick summary table of attendance per outreach event and attendance per programming
oandp %>% summarise(month, APP, APO)
oandp %>% filter(date >= as.Date("2023-04-01", "%Y-%m-%d")) #& date <= as.Date("2022-06-01", "%Y-%m-%d"))
#Looking at some summary statistics for the particular time (I think I'm doing pseudo math here)
summary(oandp$APO, na.rm = TRUE) #Be wary of this because of missing data
summary(oandp$APP, na.rm = TRUE)
#Attendance per outreach
ggplot(oandp, aes(date, APO)) +
geom_line(color = "blue3", size = 1) +
geom_point(aes(size = total_outreach_events), alpha = 0.3, color = "black") +
geom_text(aes(label = total_outreach_events), size = 3, hjust = 0, vjust = -1, color = "black") +
labs(title = "Attendence per Outreach Event at Library 1",
x = "",
y = "Attendence per Outreach",
caption = "Figure 4.1",
size = "Number of Outreach Events") +
scale_x_date(
date_breaks = "1 month",
limits = as.Date(c("2022-01-01", "2023-06-01"), "%Y-%m-%d"),
date_labels = "%b '%y") +
#scale_y_continuous(
#breaks = seq(0, 1000, by = 100),
#limits = c(0, 1000)) +
scale_size_continuous(breaks = c(2, 4, 6),
range = c(1, 8)) + # set the range of sizes here
#scale_color_manual(name = NULL,
#values = c("APO" = "blue3", "APP" = "black")) +
theme_clean() +
theme(axis.text.x = element_text(angle = 30, hjust = 1),
legend.position = c(.76, .85),
legend.direction = "horizontal",
legend.title = element_text(size = 9),
legend.text = element_text(size = 8))
#Attendance per program
ggplot(oandp, aes(date, APP)) +
geom_line(color = "blue3", size = 1) +
geom_point(aes(size = total_program_events), alpha = 0.3, color = "black") +
geom_text(aes(label = total_program_events), size = 3, hjust = 0, vjust = -0.8, color = "black") +
labs(title = "Attendence per Program at Library 2",
x = "",
y = "Attendence per Program",
caption = "Figure 4.2",
size = "Number of Programming Events" ) +
scale_x_date(
date_breaks = "1 month",
limits = as.Date(c("2022-01-01", "2023-06-01"), "%Y-%m-%d"),
date_labels = "%b '%y") +
#scale_y_continuous(
#breaks = seq(0, 70, by = 10),
#limits = c(0, 70)) +
scale_size_continuous(breaks = c(10, 30, 50),
range = c(1, 8)) + # set the range of sizes here
#scale_color_manual(name = NULL,
#values = c("APO" = "blue3", "APP" = "black")) +
theme_clean() +
theme(axis.text.x = element_text(angle = 30, hjust = 1),
legend.position = c(.34, .85),
legend.direction = "horizontal",
legend.title = element_text(size = 9),
legend.text = element_text(size = 8))
#attendance per program year over year
ggplot(oandp, aes(month(date, label=TRUE, abbr=TRUE), APP, group = factor(year(date)), color = factor(year(date)))) +
geom_line(size = 1) +
geom_point(aes(size = total_program_events), alpha = 0.3, show.legend = FALSE) +
geom_text(aes(label = total_program_events), size = 3, hjust = 0, vjust = -0.8, show.legend = FALSE) +
labs(title = "Attendence per Program at Library 2",
x = NULL,
y = "Attendence per Program",
caption = "Figure 4.2",
size = "Number of Programming Events",
subtitle = "*Size of Dot Represents Number of Programming Events") +
#scale_x_date(
#date_breaks = "1 month",
#limits = as.Date(c("2022-01-01", "2023-06-01"), "%Y-%m-%d"),
#date_labels = " %b '%y") +
scale_y_continuous(
breaks = seq(0, 100, by = 10),
limits = c(0, 100)) +
scale_size_continuous(breaks = c(10, 30, 50),
range = c(1, 8)) + # set the range of sizes here
scale_color_manual(name = NULL,
values = c("2021" = "darkgreen", "2022" = "orangered2", "2023" = "blue3")) +
theme_clean() +
theme(plot.title = element_text(hjust = .5),
plot.subtitle = element_text(size = 8),
panel.grid.major.x = element_line(color = "grey", size = 0.2),
panel.grid.minor.y = element_line(color = "grey", linetype = "dotted"),
legend.position = c(.84, .8),
legend.text = element_text(size = 10))
#attendance per outreach year over year
ggplot(oandp, aes(month(date, label=TRUE, abbr=TRUE), APO, group = factor(year(date)), color = factor(year(date)))) +
geom_line(size = 1) +
geom_point(aes(size = total_outreach_events), alpha = 0.3, show.legend = FALSE) +
geom_text(aes(label = total_outreach_events), size = 3, hjust = 0, vjust = -0.8, show.legend = FALSE) +
labs(title = "Attendence per Outreach at Library 1",
x = NULL,
y = "Attendence per Outreach",
caption = "Figure 4.2",
size = "Number of Programming Events",
subtitle = "*Size of Dot Represents Number of Outreach Events") +
#scale_x_date(
#date_breaks = "1 month",
#limits = as.Date(c("2022-01-01", "2023-06-01"), "%Y-%m-%d"),
#date_labels = " %b '%y") +
#scale_y_continuous(
#breaks = seq(0, 100, by = 10),
#limits = c(0, 100)) +
scale_size_continuous(breaks = c(10, 30, 50),
range = c(1, 8)) + # set the range of sizes here
scale_color_manual(name = NULL,
values = c("2021" = "darkgreen", "2022" = "orangered2", "2023" = "blue3")) +
theme_clean() +
theme(plot.title = element_text(hjust = .5),
plot.subtitle = element_text(size = 8),
panel.grid.major.x = element_line(color = "grey", size = 0.2),
panel.grid.minor.y = element_line(color = "grey", linetype = "dotted"),
legend.position = c(.88, .8),
legend.text = element_text(size = 10))
visit_daily <- read_xlsx("Data/Example Data.xlsx", sheet = "daily_visits")
#modifying some variables
visit_daily$day <- factor(visit_daily$day, levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))
#list of branches to choose from
unique(visit_daily$branch)
#Choosing a particular branch for analysis
branch_name <- "lib3"
visit_daily_bs <- filter(visit_daily, branch == branch_name)
#filtering the time we want to looks at (Q1 2023)
start_date_box <- "2023-01-01"
end_date_box <- "2023-9-11"
visit_daily_bst <- visit_daily_bs %>% filter(date >= as.Date(start_date_box, "%Y-%m-%d") & date <= as.Date(end_date_box, "%Y-%m-%d"))
ggplot(visit_daily_bst, aes(day, door_count)) +
geom_boxplot(fill = "blue1",  color = "black", outlier.color = "red") +
stat_summary(fun.y = "mean", geom = "point", shape = 23, size = 2, fill = "white") + #adding the mean to the boxplots
labs(title = paste0("Vistors Per Day at ",  branch_name),
subtitle = paste0("From ", format(as.Date(start_date_box), "%B %d, %Y"), " to ", format(as.Date(end_date_box), "%B %d, %Y")),
x = NULL,
y = "Visitors",
caption = "Figure 1.3") +
#scale_y_continuous(
#breaks = seq(0, 700, by = 100),
#limits = c(0, 700)) +
#If we want to abbreviate dates
#scale_x_discrete(labels = c("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun")) +
#scale_fill_manual(values = c("grey85", "#FFDDCC"), guide = FALSE) +  #could potentially be used to highlight one of the boxplots
theme_clean() +
theme(panel.grid.minor.y = element_line(color = "grey", linetype = "dotted"),
plot.subtitle = element_text(size = 10),
plot.caption = element_text(size = 8))
summary(visit_daily_bst$door_count)
#Boxplot numbers but in chart form!
visit_daily_bst %>%
group_by(day) %>%
summarise(Average_Visitors = mean(door_count, na.rm = TRUE), n = n()) %>%
arrange(desc(Average_Visitors))
visitors <- read_xlsx("Data/Example data.xlsx", sheet = "visitor_count")
# First we need create a date column based on all the section headers so we need to reshape the data frame to long format
visitors <- pivot_longer(visitors, cols = -Branch, names_to = "Week", values_to = "Count")
#With each variable we want now having it's own separate column, we can now pivot to wider data frame with each branch as a column header
visitors <- pivot_wider(visitors, names_from = Branch, values_from = Count)
#Tried but didn't work because of multiple months being in the same string
#visitors$week_date <- sapply(visitors$Week, function(x) str_split(x, pattern = "-")[[1]][1])
visitors$w1 <- sapply(visitors$Week, function(x) trimws(str_split(x, pattern = "-")[[1]][1]))
visitors$w1 <- gsub("\\.", "", visitors$w1)
visitors$year <- sapply(visitors$Week, function(x) trimws(str_split(x, pattern = ",")[[1]][2]))
visitors$date_week <- paste0(visitors$w1, ", " , visitors$year)
visitors$date <- as.Date(visitors$date_week, format = "%b %d, %Y")
#Creating a quarters column based on the date so we can group the data easily by quarterly analysis
visitors$quarter <- quarters(visitors$date)
#Creating a week day column so we can compare a weeks worth of data to the same week the year before
visitors$week_num <- week(visitors$date)
# Choosing branch for weekly visitor analysis
#Libraries to choose: "lib1" "lib2" "lib3" "lib4"
branch_weekly_visitors <- "lib1"
#we want to plot a line for each branch, so we need to specify the group aesthetic to ensure that ggplot knows to group the data by branch, rather than trying to connect points across different branches.
ggplot(visitors, aes(date)) +
geom_line(aes(y = lib2, color = "lib2"), size = 1) +
geom_line(aes(y = lib3, color = "lib3"), size = 1) +
geom_line(aes(y = lib4, color = "lib4"), size = 1) +
geom_line(aes(y = lib5, color = "lib5"), size = 1) +
geom_line(aes(y = lib1, color = "lib1"),   size = 1) +
geom_point(aes(y = lib1)) +
labs(title = "Visitors Per Week Across all Branches",
subtitle = "Q2 2023",
x= NULL,
y = "Visitors",
caption = "Figure 1.1") +
scale_y_continuous(
breaks = seq(0, 7000, by = 1000),
limits = c(0, 7000)) +
scale_x_date(
date_breaks = "1 week",
#Setting the dates here is kinda weird but this works!
limits = as.Date(c("2023-04-01", "2023-06-30"), "%Y-%m-%d"),
date_labels = "%B %d",
expand = c(0.02, 0)) +
scale_color_manual(name = NULL,
values = c("lib1" = "blue3", "lib2" = "black", "lib3" = "green",
"lib4" = "red", "lib5" = "hotpink")) +
theme_clean() +
theme(axis.text.x = element_text(angle = 20, hjust = 1),
plot.subtitle = element_text(size = 12),
#Adding a vertical line at each week interval
panel.grid.major.x = element_line(color = "grey", size = 0.2),
panel.grid.minor.y = element_line(color = "grey", linetype = "dotted"),
legend.position = c(0.72, 0.8),
legend.direction = "horizontal",
legend.text = element_text(size = 8))
#Data wrangling for monthly visitor dataframe
visitor_mon <- read_xlsx("Data/Example Data.xlsx", sheet = "visitor_mon")
#pivot to wider graph
visitor_mon <- pivot_wider(visitor_mon, names_from = branch, values_from = visitor_count)
#Creating a synthetic month variable
visitor_mon$date <- as.Date(paste(visitor_mon$year, visitor_mon$month, "01", sep = "-"))
class(visitor_mon$date)
#grabbing the month and year (12-18 for december 2018) of the tweet tweeted for later analysis to group by month and year
visitor_mon$month <- format(visitor_mon$date, "%b")
# Choosing branch for monthly visitor analysis
#Libraries to choose: "lib1" "lib2" "lib3" "lib4"
branch_monthly_visitors <- "lib4"
ggplot(visitor_mon, aes(month(date, label=TRUE, abbr=TRUE), .data[[branch_monthly_visitors]], group = factor(year), color = factor(year))) +
geom_line(size = 1) +
geom_point(size = 2) +
labs(title = paste0("Visitors per Month at ", branch_monthly_visitors , " Year Over Year"),
x= NULL,
y = "Visitors",
caption = "Figure 1.2",
subtitle = "*Red highlight represents Q2",
color = NULL) +
#scale_y_continuous(
#breaks = seq(0, 12000, by = 2000),
#limits = c(0, 12000)) +
scale_color_manual(name = NULL,
values = c("2021" = "chartreuse3", "2022" = "orangered2", "2023" = "blue3")) +
annotate("rect", xmin = "Apr", xmax = "Jun",
ymin = -Inf, ymax = Inf, alpha = .1, fill = "red") +
#annotate("rect", xmin = as.Date("2022-06-01", "%Y-%m-%d"), xmax = as.Date("2022-08-01", "%Y-%m-%d"),
#ymin = -Inf, ymax = Inf, alpha = .1, fill = "red") +
theme_clean() +
theme(#Adding a vertical line at each week interval
panel.grid.major.x = element_line(color = "grey", size = 0.2),
panel.grid.minor.y = element_line(color = "grey", linetype = "dotted"),
plot.subtitle = element_text(size = 10),
legend.position = c(0.85, 0.83)) +
guides(fill = guide_legend(reverse = TRUE)) # Can't reverse legend order like this because year is a factor variable
#grouping visitor count by week to get day numbers that staff are familiar with
visitors %>% filter(date >= as.Date("2023-01-01", "%Y-%m-%d") & date < as.Date("2023-04-01", "%Y-%m-%d")) %>%
group_by(date) %>% summarise(avg_per_day = lib1/7)
#Grabbing summary statistics for the lib2 branch over Q2 2023
vis <- visitors %>% filter(date >= as.Date("2023-04-01", "%Y-%m-%d") & date < as.Date("2023-06-30", "%Y-%m-%d"))
data.frame(unclass(summary(vis$lib2)))
#Creating temporary data frames to remove date to then add the prefix to every other column name
visitor_mon_nodate <- visitor_mon %>% select(-date)
visitor_mon_date <- visitor_mon %>% select(date)
#adding visitor to all colnames in that dataframe to help differentiate during merge
colnames(visitor_mon_nodate) <- paste("visitor_", colnames(visitor_mon_nodate), sep = "")
#Recombining the prefixed "visitor_" columns the date column dataframe
visitor_mon <- cbind(visitor_mon_nodate, visitor_mon_date)
#Now that the visitor_mon is ready we can merge it with the circ_mon
combined_vist_circ <- merge(visitor_mon, circ_mon, by = "date")
#Sorting the combined_vist_circ dataframe to make looping through that dataframe go by date
combined_vist_circ <- arrange(combined_vist_circ, by= "date")
#Creating 2 temporary datasets to get the branch names from the visitor_mon and circ_mon dataframe and save them to character vectors for the upcoming loop
beep <- visitor_mon %>% select(-visitor_month, -date, -visitor_year)
branches_vis <- colnames(beep)
beep <- circ_mon %>% select(-month, -date, -year)
branches_circ <- colnames(beep)
#### Making the merge of visitor_mon dataframe with the circ_mon dataframe ####
#Creating an empty list to store our results
results <- list()
# loop over each restaurant
for (branch in branches_circ) {
# calculate orders per visitor for the current restaurant
circ_visitor <- combined_vist_circ[[branch]] / combined_vist_circ[[paste0("visitor_", branch)]]
# store the results in a new column in the data frame
results[[paste0("circ_per_visitor", branch)]] <- circ_visitor
}
results <- as.data.frame(results)
circ_per_visitor <- cbind(combined_vist_circ$date, results)
#Renaming the date variable in the circ_per_visitor dataframe
circ_per_visitor <- circ_per_visitor %>%
rename(date = "combined_vist_circ$date")
#Cleaning the temporary datasets
rm(visitor_mon_nodate, visitor_mon_date, beep, circ_visitor, results)
#Look at poor Kellogsville :(
ggplot(circ_per_visitor, aes(date)) +
geom_line(aes(y = circ_per_visitorlib1, color = "lib1"), size = 1) +
geom_line(aes(y = circ_per_visitorlib2, color = "lib2"), size = 1) +
geom_line(aes(y = circ_per_visitorlib3, color = "lib3"), size = 1) +
geom_line(aes(y = circ_per_visitorlib4, color = "lib4"), size = 1) +
labs(
title = "Checkouts per Visitor by Month",
y = "Checkouts per Visitor",
x = NULL,
caption = "Figure 3.1",
subtitle = "Large Branches") +
scale_y_continuous(
breaks = seq(0, 15, by = 2),
limits = c(0,15)) +
scale_x_date(
date_breaks = "1 month",
limits = as.Date(c("2022-01-01", "2023-06-01"), "%Y-%m-%d"),
date_labels = "%b '%y",
expand = c(0.01, 0)) +
scale_color_manual(name = NULL,
values = c("lib1" = "blue3", "lib2" = "black", "lib3" = "green",
"lib4" = "red")) +
#annotate("rect", xmin = as.Date("2022-06-01", "%Y-%m-%d"), xmax = as.Date("2022-08-01", "%Y-%m-%d"),
#ymin = -Inf, ymax = Inf, alpha = .1, fill = "red") +
theme_clean() +
theme(axis.text.x = element_text(angle = 30, hjust = 1),
plot.subtitle = element_text(size = 10),
#Adding a vertical line at each week interval
panel.grid.major.x = element_line(color = "grey", size = 0.2),
panel.grid.minor.y = element_line(color = "grey", linetype = "dotted"),
legend.position = c(0.73, 0.86),
legend.direction = "horizontal",
legend.text = element_text(size = 8))
head(orig_circ_day)
head(visit_daily)
visit_daily_oncount <- select(visit_daily, date, day, branch, door_count)
#needed to properly merge on the date column in the orig_circ_day dataset
visit_daily_oncount$date <- as.Date(visit_daily_oncount$date)
circday_visitday <- merge(orig_circ_day, visit_daily_oncount, by = c("date", "branch"))
summary(circday_visitday$transactions)
summary(circday_visitday$door_count)
#Assigning specific branch sizes
circday_visitday$branch_size <- ifelse(circday_visitday$branch %in% l_branches, "l_branch",
ifelse(circday_visitday$branch %in% m_branches, "m_branch", "s_branch"))
#Filtering out small branches
#circday_visitday <- circday_visitday %>% filter(branch_size == "l_branch")
#Dropping specific observations with outleirs based on their index number in the dataframe
#circday_visitday <- circday_visitday[-c(10630, 4588, 8191), ]
circday_visitday <- circday_visitday %>% filter(door_count <= 2000)
#filtering out the weekend
#circday_visitday <- circday_visitday %>% filter(!day.x %in% c("Saturday", "Sunday"))
ggplot(circday_visitday, aes(door_count, transactions, color = branch_size)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +  # Add a linear regression line
geom_abline(intercept = 0, slope = 1, color = "red", linetype = "dashed") +  # Add y = x line
# Calculate and display Pearson's correlation coefficient
geom_text(x = max(circday_visitday$door_count) * 0.10,
y = max(circday_visitday$transactions) * 0.65,
label = paste("Pearson's R =", round(cor(circday_visitday$door_count, circday_visitday$transactions), 2)),
color = "hotpink") +
labs(
title = "Scatterplot Between Visitors & Checkouts",
y = "Checkouts",
x = "Visitors",
caption = "Figure 5.1",
color = NULL) +
scale_color_manual(values = c("l_branch" = "#f0645d", "m_branch" = "#fcb813", "s_branch" = "#00b059"), ##1e196a
labels = c("l_branch" = "Large Branch", "m_branch" = "Medium Branch", "s_branch" = "Small Branch")) +
theme_clean() +
theme(legend.position = c(0.13, 0.86),
legend.text = element_text(size = 8))
